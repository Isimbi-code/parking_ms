// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum Role {
  PARKING_ATTENDANT
  ADMIN
}

enum SpaceStatus {
  AVAILABLE
  UNAVAILABLE
}

model User {
  id         Int        @id @default(autoincrement())
  name       String
  email      String     @unique
  password   String
  role       Role       @default(PARKING_ATTENDANT)
  parkings   Parking[]
  logs       Log[]
  tickets    Ticket[]
  carexits   CarExit[]
  carentries CarEntry[]
  bills      Bill[]

  @@map("users")
}

model Parking {
  id       Int       @id @default(autoincrement())
  code     String    @unique
  name     String    @unique
  spaces   Space[]
  Fee      Int
  location String
  userId   Int
  user     User      @relation(fields: [userId], references: [id])
  tickets  Ticket[]
  carexits CarExit[]

  @@map("parkings")
}

model Space {
  id          Int         @id @default(autoincrement())
  spaceNumber Int         @unique
  status      SpaceStatus @default(AVAILABLE)
  parkingId   Int
  parking     Parking     @relation(fields: [parkingId], references: [id])
  CarEntry    CarEntry[]

  @@map("spaces")
}

model Bill {
  id          Int      @id @default(autoincrement())
  userId      Int
  parkingCode String
  amount      Int
  createdAt   DateTime @default(now())

  user       User      @relation(fields: [userId], references: [id])
  carEntryId Int?
  carEntry   CarEntry? @relation(fields: [carEntryId], references: [id])

  @@map("bills")
}

model CarEntry {
  id            Int       @id @default(autoincrement())
  plateNumber   String
  entryDateTime DateTime  @default(now())
  exitDateTime  DateTime?
  chargedAmount Int       @default(0)
  parkingCode   String
  userId        Int
  user          User      @relation(fields: [userId], references: [id])
  tickets       Ticket[]
  bills         Bill[]
  spaceId       Int
  space         Space     @relation(fields: [spaceId], references: [id])

  @@map("carentries")
}

model CarExit {
  id            Int      @id @default(autoincrement())
  plateNumber   String
  entryDateTime DateTime @default(now())
  exitDateTime  DateTime
  chargedAmount Int      @default(0)
  parkingCode   String
  parking       Parking  @relation(fields: [parkingCode], references: [code])
  userId        Int
  user          User     @relation(fields: [userId], references: [id])

  @@map("carexits")
}

model Ticket {
  id         Int       @id @default(autoincrement())
  userId     Int
  parkingId  Int
  amount     Int
  created_at DateTime  @default(now())
  user       User      @relation(fields: [userId], references: [id])
  parking    Parking   @relation(fields: [parkingId], references: [id])
  carEntryId Int?
  carEntry   CarEntry? @relation(fields: [carEntryId], references: [id])

  @@map("tickets")
}

model Log {
  id        Int      @id @default(autoincrement())
  action    String
  userId    Int
  user      User     @relation(fields: [userId], references: [id])
  createdAt DateTime @default(now())

  @@map("logs")
}
