// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum Role {
  USER
  ADMIN
}

enum VehicleType {
  CAR
  MOTORCYCLE
  TRUCK
}

enum Size {
  SMALL
  MEDIUM
  LARGE
}

enum SlotStatus {
  AVAILABLE
  UNAVAILABLE
}

enum RequestStatus {
  PENDING
  APPROVED
  REJECTED
}

enum Location {
  NORTH
  SOUTH
  EAST
  WEST
}

model User {
  id        Int       @id @default(autoincrement())
  name      String
  email     String    @unique
  password  String
  role      Role      @default(USER)
  isVerified Boolean   @default(false)
  otp       String?
  otpExpiry DateTime?
  vehicles  Vehicle[]
  requests  Request[]
  logs      Log[]
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt

  @@map("users")
}

model Vehicle {
  id          Int         @id @default(autoincrement())
  plateNumber String      @unique
  type        VehicleType
  size        Size
  attributes  Json?
  userId      Int
  user        User        @relation(fields: [userId], references: [id])
  requests    Request[]
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt

  @@map("vehicles")
}

model ParkingSlot {
  id         Int         @id @default(autoincrement())
  slotNumber String      @unique
  size       Size
  type       VehicleType
  status     SlotStatus  @default(AVAILABLE)
  location   Location
  requests   Request[]
  createdAt  DateTime    @default(now())
  updatedAt  DateTime    @updatedAt

  @@map("parking_slots")
}

model Request {
  id         Int           @id @default(autoincrement())
  user       User          @relation(fields: [userId], references: [id])
  userId     Int
  vehicle    Vehicle       @relation(fields: [vehicleId], references: [id])
  vehicleId  Int
  slot       ParkingSlot?  @relation(fields: [slotId], references: [id])
  slotId     Int?
  status     RequestStatus @default(PENDING)
  slotNumber String?
  createdAt  DateTime      @default(now())
  updatedAt  DateTime      @updatedAt

  @@map("requests")
}

model Log {
  id        Int      @id @default(autoincrement())
  action    String
  userId    Int
  user      User     @relation(fields: [userId], references: [id])
  createdAt DateTime @default(now())

  @@map("logs")
}
